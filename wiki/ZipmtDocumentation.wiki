#summary Zipmt description and documentation.
#labels Featured,Phase-Design

= Introduction =

This page details the different modes of zipmt and shows the command line useage.


= Details =


== Zipmt Documentation ==

=== How it works ===
Zipmt has two modes of operation, Slice mode and Stream mode.  

  * Slice mode compresses a file by dividing it into several slices, one per thread.  Each thread then compresses its assigned slice independently of the other threads creating one compressed temp file per thread.  The main thread then concatenates the slices into a single compressed file and cleans up the temp files.
  * Stream mode is used to handle data from an input stream rather than a file (although it can operate on both).  It works by reading chunks of the input stream and pushing them into a thread pool which runs the compression algorithm on the individual chunks.  Each chunk is marked with a sequence number so we can reassemble the results in the correct order after they have been compressed.  When the chunk is fully compressed the worker threads push them into a sorted queue which gets drained and written out by the main thread.

Although Stream mode has more overhead they both run in the same amount of time (the compression algorithm does the bulk of the work in either case).  The advantage of Stream mode is that it can be used in a pipe line since it can read from the standard input.  Slice mode seems to get slightly better compression probably do to the additional overhead  incurred by Stream mode by repeatedly calling the compression algorithm but the differences are not significant, so ultimately, we really only need Stream mode but Slice mode is interesting enough to keep it in the code for now.

=== Usage ===

{{{
  zipmt [OPTION...] <file> - muti-threaded bzip2 compression utility

  <file> - The name of the file to compress or just use "-" to indicate 
        standard input.

Help Options:
  -?, --help        Show help options

Application Options:
  -t, --threads     The number of threads to use.
  -v, --verbose     Show Progress
  -o, --outfile     The name of an output file to write to
  -c, --stdout      Write data to standard out
  -s, --stream      Compress using the stream method
}}}


=== Example ===
To use in a pipeline with tar:
{{{
  tar cf - files* | zipmt -s -c - > files.tar.bz2
}}}